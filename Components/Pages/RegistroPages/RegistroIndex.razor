@page "/Registro"
@using System.Linq.Expressions
@inject RegistroServices registroServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Lista de Aportes</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card-header text-center bg-primary text-white">
            <h5 class="card-title text-center">
                <strong>
                    Consulta de Aportes
                </strong>
            </h5>
        </div>

        <div class="card-body">
            <div class="d-flex justify-content-end mb-2">
                <a href="/Registro/Create" class="btn btn-success">
                    <span class="bi bi-plus-square"></span> Crear
                </a>
            </div>

            @*Labels*@
            <div class="row">
                @*Filtro por *@
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" selected disabled>Elija una opci&oacute;n</option>
                        <option value="aporteId" >Aporte ID</option>
                        <option value="Name">Nombre</option>
                    </InputSelect>
                </div>

                <div class="col-4">
                    <label class="col-form-label"><strong>B&uacute;squeda</strong></label>
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar">Buscar</button>
                    </div>
                </div>
            </div>

            @*Filtro por Fecha *@
            <div class="row mt-2">
                <div class="col-md-4 d-flex align-items-center">
                    <label class="me-2 mb-0">
                        <strong>Desde</strong>
                    </label>
                    <InputDate @bind-Value="FechaDesde" class="form-control input-date-match" />
                </div>
                <div class="col-md-4 d-flex align-items-center">
                    <label class="me-2 mb-0"
                        <strong>Hasta</strong>
                    </label>
                    <InputDate @bind-Value="FechaHasta" class="form-control input-date-match" />
                </div>
            </div>

            <table class="table table-striped table-hover table-bordered mt-4">
                <thead class="table text-black">
                    <tr>
                        <th>Aporte ID</th>
                        <th>Fecha</th>
                        <th>Nombres</th>
                        <th>Montos</th>
                        <th>Editar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var aporte in Aporte)
                    {
                        <tr>
                            <td>@aporte.AporteId</td>
                            <td>@aporte.Fecha.ToString("dd/MM/yyyy")</td>
                            <td>@aporte.Name</td>
                            <td>@aporte.Mount</td>
                            <td class="text-center">
                                <a href="/Registro/Edit/@aporte.AporteId" class="btn btn-outline-primary bi bi-pencil-square"></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="d-flex justify-content-between">
                <div>
                    <strong>Total Usuarios: </strong> @TotalUsuarios
                </div>
                <div>
                    <strong>Total Monto: </strong> @TotalMonto.ToString("C")
                </div>
            </div>

        </div>
    </div>
</div>

@code {

    public DateTime? FechaDesde { get; set; }
    public DateTime? FechaHasta { get; set; }
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    public List<Aportes> Aporte { get; set; } = new List<Aportes>();
    public double TotalMonto { get; set; }
    public int TotalUsuarios { get; set; }

    protected override async Task OnInitializedAsync()
    {
       Aporte = await registroServices.Listar(r => r.AporteId > 0);   
       CalcularTotales();
    }

    public async Task Buscar()
    {
        Expression<Func<Aportes, bool>> filtroExp = r => r.AporteId > 0;

        if (Filtro == "aporteId")
        {
            int id = int.Parse(ValorFiltro);
            filtroExp = r => r.AporteId == id;
        }
        else if (Filtro == "Name")
        {
            filtroExp = r => r.Name != null && r.Name.Contains(ValorFiltro);
        }

        var lista = await registroServices.Listar(filtroExp);

        if (FechaDesde.HasValue)
            lista = lista.Where(r => r.Fecha >= FechaDesde.Value).ToList();

        if (FechaHasta.HasValue)
            lista = lista.Where(r => r.Fecha <= FechaHasta.Value).ToList();

        Aporte = lista;
    }

    private void CalcularTotales()
    {
        TotalMonto = Aporte.Sum(a => a.Mount);
        TotalUsuarios = Aporte.Select(a => a.Name).Distinct().Count();
    }

}
